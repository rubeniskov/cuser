#!/usr/bin/env node 

const path = require('path');
const { execSync } = require('child_process');
const glob = require('glob');

const gh = execSync('git remote -v').toString().split(/[\s\t\n]+/mg)[1].split(':')[1].replace('.git', '');
const html = false;

const columns = ["name", "description", "version", "coverage", "downloads"];

const createLink = (value, href) => {
  if (html) return `<a href="${href}">${value}</a>`
  return `[${value}](${href})`;
} 
const createBadge = (name, image) => {
  if (html) return `<img src="${image}" alt="${name}"/>`
  return `![${name}](${image})`;
}
const name = (pkg, ghdir) => createLink(`\`${pkg}\``, `//github.com/${gh}/tree/master/${ghdir}`);

const downloads = (pkg) => createLink(
  createBadge(
    'npm-downloads', 
    `https://img.shields.io/npm/dw/${pkg}`), 
  `https://www.npmjs.com/package/${pkg}`)

const version = (pkg) => createLink(
  createBadge(
    'npm-version', 
    `https://img.shields.io/npm/v/${pkg}.svg`), 
  `https://www.npmjs.com/package/${pkg}`)

const coverage = (pkg) => createLink(
  createBadge(
    'codecov', 
    `https://codecov.io/gh/${gh}/branch/master/graph/badge.svg?flag=${pkg.split(/\//)[1]}`), 
  `https://codecov.io/gh/${gh}`)


const description = (_, __, desc) => desc


const packageBadges = {
  name, version, coverage, description, downloads
}

// Creates the table row for a package
const generatePackageRow = async item => {
  const promises = columns.map(col => packageBadges[col](...item))
  const vals = await Promise.all(promises)

  return `| ${vals.join(' | ')} |`
}

// Generates a row for the table, depending if it's a package or a heading
const generateRow = item => {
  if (Array.isArray(item)) {
    return generatePackageRow(item)
  } else {
    return `| **${item}** |`
  }
}

const pkg = require(path.resolve(process.cwd(), 'package.json'));

const { workspaces } = pkg;
const categories = workspaces.categories || {};
const files = glob.sync(`${workspaces.packages.join(',')}`);

(async () => {
  const header = `| ${columns.join(' | ')} |`
  const hr = `| ${columns.map(() => '---------').join('|')} |`
  const packages = files
    .map((filename) => ({
      filename,
      ...require(path.resolve(process.cwd(), filename, 'package.json'))
    }))
    
  const promises = Object.entries(categories).reduce((prev, [name, modules]) => [...prev, generateRow(name[0].toUpperCase() + name.substring(1)), ...modules.map(moduleName => {
    const pkg = packages.find(({ name }) => name === moduleName);
    if (!pkg) return;
    const { name, filename, description } = pkg;
    return generateRow([name, filename, description])
  }).filter(Boolean)], []);

  const rows = (await Promise.all(promises)).join('\n')

  console.log([header, hr, rows].join('\n'))
})()
